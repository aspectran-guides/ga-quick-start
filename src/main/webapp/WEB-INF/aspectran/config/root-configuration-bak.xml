<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE aspectran PUBLIC "-//ASPECTRAN//DTD Aspectran Configuration 2.0//EN"
		"http://aspectran.github.io/dtd/aspectran-2.dtd">

<aspectran>
	
	<description>
		Quick Start Guide를 위한 Aspectran Configuration입니다.
		몇 가지 다른 방법으로 "Hello, World!" 문자열을 출력하는 웹 응용프로그램입니다.
	</description>

	<!-- 기본 설정 -->
	<settings>
		<!-- Transelt Name의 패턴을 정의합니다.  -->
		<setting name="transletNamePattern" value="/ga-quick-start/*"/>
	</settings>

	<!-- 다국어 처리를 위한 메시지 Bean을 정의합니다.  -->
	<bean id="messageSource" class="com.aspectran.core.context.message.ResourceBundleMessageSource">
		<properties>
			<item name="basename">locale.messages</item>
		</properties>
	</bean>

	<!-- 로케일을 결정하기 위해 세션을 이용합니다. -->
	<bean id="localeResolver" class="com.aspectran.core.context.locale.SessionLocaleResolver"/>

	<!-- 로케일을 변경하기 위한 인터셉터 Bean을 정의합니다. -->
	<bean id="localeChangeInterceptor" class="com.aspectran.core.context.locale.LocaleChangeInterceptor"/>

	<!-- JSP를 View로 사용하기 위해 JSP View Dispatcher를 정의합니다. -->
	<bean id="jspViewDispatcher" class="com.aspectran.web.activity.response.view.JspViewDispatcher">
		<properties>
			<item name="prefix" value="/WEB-INF/jsp/"/>
			<item name="suffix" value=".jsp"/>
		</properties>
	</bean>

	<aspect id="defaultRequestRule">
		<description>
			모든 요청에 대하여 기본 설정을 적용합니다.
		</description>
		<joinpoint scope="request"/>
		<settings>
			<setting name="characterEncoding" value="utf-8"/>
			<setting name="localeResolver" value="localeResolver"/>
			<setting name="localeChangeInterceptor" value="localeChangeInterceptor"/>
		</settings>
	</aspect>

	<aspect id="defaultResponseRule">
		<description>
			모든 응답 처리에 대하여 기본 설정을 적용합니다.
		</description>
		<joinpoint scope="response"/>
		<settings>
			<setting name="characterEncoding" value="utf-8"/>
			<setting name="contentEncoding" value="gzip"/>
			<setting name="viewDispatcher" value="jspViewDispatcher"/>
		</settings>
	</aspect>

	<bean id="simplestAction" class="hello.SimplestAction">
		<description>
			"Hello World"를 반환하는 hellowWorld Method를 가지고 있는 Action Bean을 정의합니다.
		</description>
	</bean>

	<bean id="simplestAdvice" class="hello.SimplestAdvice">
		<description>
			hellowWorld Method의 실행 전 후에 실행되는 Method를 가지고 있는 Advice Bean을 정의합니다.
		</description>
	</bean>

	<aspect id="simplestAspect">
		<description>
			"Hello World"만 출력하기에는 심심한 면이 없지 않아서,
			내부적으로 특정 Method를 실행하는 기능을 주입시켜 보겠습니다.
			요청 URI가 "/ga-quick-start/"로 시작하고,
			simplestAction Bean의 helloWorld Method를 실행하는 Translet이 발견되면,
			해당 Translet의 실행 전에는 simplestAdvice Bean의 welcome Method를 실행하고,
			해당 Translet의 실행 후에는 simplestAdvice Bean의 goodbye Method를 실행합니다.
		</description>
		<joinpoint scope="translet">
			<pointcut>
				target: {
					+: "/ga-quick-start/*@simplestAction^helloWorld"
				}
			</pointcut>
		</joinpoint>
		<advice bean="simplestAdvice">
			<before>
				<action method="welcome"/>
			</before>
			<after>
				<action method="goodbye"/>
			</after>
		</advice>
	</aspect>

	<translet name="simple/helloWorld">
		<description>
			"Hello, World!" 문자열을 출력하는 Translet을 정의합니다.
			이 방식은 "Hello, World!" 문자열을 출력하는 가장 단순한 방식입니다.
			Bean의 Method를 실행하지도 않으며, JSP와 같은 View도 필요하지 않는 것이 특징입니다.
			요청 URI가 "/ga-quick-start/direct/helloWorld"이면
			"Hello, World!" 문자열을 텍스트 형식의 컨텐츠로 가공해서 응답합니다.
		</description>
		<transform type="transform/text" contentType="text/plain">
			<template>Hello, World!</template>
		</transform>
	</translet>

	<translet name="helloWorld">
		<description>
			"Hello, World!" 문자열을 출력하는 Translet을 정의합니다.

			요청 URI가 "/ga-quick-start/helloWorld"이면
			simplestAction Bean에서 helloWorld Method를 실행합니다.
			helloWorld Method가 반환하는 "Hello, World!" 문자열을
			텍스트 형식의 컨텐츠로 가공해서 응답합니다.
		</description>
		<transform type="transform/text" contentType="text/plain">
			<action id="hello" bean="simplestAction" method="helloWorld"/>
		</transform>
	</translet>

	<translet name="front/${targetName}" method="ALL">
		<description>
			JSP View Dispatcher를 이용해서 "Hello, World!" 문자열을 출력하는 Translet을 정의합니다.
			요청 URI가 "/ga-quick-start/front/helloWorld"이면
			"/WEB-INF/jsp/helloWorld.jsp" 파일로 포워딩 합니다.
			"Hello, World!" 문자열은 Request Attributes에 담아서 보내고,
			JSP에서는 "hello.message" 키로 값을 참조해서 화면에 출력하는 것이 특징입니다.
		</description>
		<echo id="hello">
			<attributes>
				<item name="message">Hello, World!</item>
			</attributes>
		</echo>
		<dispatch name="${targetName}"/>
	</translet>

</aspectran>
